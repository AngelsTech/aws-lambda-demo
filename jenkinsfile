pipeline {
    agent any

    environment {
        FUNCTION_NAME = 'hi-world-first_lambda124'
        REGION = 'us-east-1'
        ZIP_FILE = 'lambda.zip'
    
    }
  
    stages {
      stage('Clone Repository') {
            steps {
                git branch: 'main', credentialsId: '66142c87-d271-41f4-82d1-cbbee8e844d0', url: 'https://github.com/AngelsTech/aws-lambda-demo.git'
            }
        }
     stage('Prepare') {
            steps {
                script {
                    sh 'zip -r lambda.zip lambda_function.py'
                }
            }
        }

   stage('Deploy Lambda') {
     steps {
        script {
             withCredentials([[
             $class: 'AmazonWebServicesCredentialsBinding',
             credentialsId: 'lambda-function-aws-cred',
             accessKeyVariable: 'AWS_ACCESS_KEY_ID',
             secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
             ]]) {
             sh '''
                aws lambda create-function \
                --function-name $FUNCTION_NAME \
                --runtime python3.13 \
                --role arn:aws:iam::529088259986:role/service-role/s3_execRole \
                --handler lambda_function.lambda_handler \
                --zip-file fileb://$ZIP_FILE \
                --region $REGION || true

                echo "Waiting for Lambda function to become Active..."
                while true; do
                    STATUS=$(aws lambda get-function-configuration \
                      --function-name $FUNCTION_NAME \
                      --region $REGION \
                      --query 'State' --output text)
                    echo "Current status: $STATUS"
                    if [ "$STATUS" = "Active" ]; then
                      break
                    fi
                     sleep 5
            done
               aws lambda update-function-code \
               --function-name $FUNCTION_NAME \
               --zip-file fileb://$ZIP_FILE \
               --region $REGION
            '''
                }
              }
          }
       }
       stage('Setup CloudWatch Schedule') {
            steps {
                script {
                  withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'lambda-function-aws-cred',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                    sh '''
                        aws events put-rule \
                        --schedule-expression "rate(15 minutes)" \
                        --name hello-schedule \
                        --region $REGION

                       # aws lambda add-permission \
                       # --function-name $FUNCTION_NAME \
                       # --statement-id hello-event \
                        #  --action 'lambda:InvokeFunction' \
                        # --principal events.amazonaws.com \
                        # --source-arn arn:aws:lambda:us-east-1:529088259986:function:hello-world-lambda \
                       # --region $REGION || true
                       aws lambda add-permission \
                       --function-name hi-world-first_lambda124 \
                       --statement-id hello-event \
                       --action lambda:InvokeFunction \
                       --principal events.amazonaws.com \
                       --region us-east-1

                        aws events put-targets \
                        --rule hello-schedule \
                      # --targets Id=1,Arn=arn:aws:lambda:us-east-1:529088259986:function:hello-world-lambda \
                        --region us-east-1
                     '''
                }
            }
        }
    }
  }
}
